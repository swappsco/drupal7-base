<?php

/**
 * Simpletest case for swappsproject module.
 * Verify swappsproject module functionality.
 */

/**
 * Functionality tests for node example module.
 */
class SwappsprojectTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Swapps Project',
      'description' => 'Ensure that the custom node type provided functions properly.',
      'group' => 'Examples',
    );
  }
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array('swappsproject'));
  }

  /**
   * This test will verify that when the module is installed, it:
   *   - Adds a new content type, swappsproject.
   *   - Attaches a body field.
   *   - Attaches other fields.
   *   - Creates a view mode, swappsproject_list.
   */

  public function testInstallationApi() {
    // At this point, the module should be installed.
    // First check for our content type.
    $node_type = node_type_get_type('swappsproject');
    $this->assertTrue($node_type, 'Swapps Project Type was created.', 'API');

    // How about the body field?
    $body = field_info_instance('node', 'body', 'swappsproject');
    $this->assertTrue($body, 'Swapps Project Type has a body field.', 'API');

    // Now look for our attached fields.
    // We made a handy function that tells us...
    $attached_fields = _swappsproject_installed_instances();
    foreach ($attached_fields as $field_name => $field_info) {
      $field = field_info_instance('node', $field_name, 'swappsproject');
      $this->assertTrue($field,
        'Field: ' . $field_name . ' was attached to swappsproject.', 'API');
    }

    // And that view mode...
    // entity_get_info() invokes hook_entity_info_alter(), so it's
    // a good place to verify that our code works.
    $entities = entity_get_info('node');
    $this->assertTrue(isset($entities['view modes']['swappsproject_node_list']),
      'Added swappsproject_node_list view mode.', 'API');
  }

  /**
   * Verify the functionality of the Swapps Project module.
   */
  public function testSwappsprojectCreate() {
    // Create and login user.
    $account = $this->drupalCreateUser(array('access content', 'create swappsproject content'));
    $this->drupalLogin($account);

     // Create node to edit.
    $edit = array(
      'title' => $this->randomName(),
      'swappsproject_url[und][0][value]' => 'https://example.com',
      'swappsproject_client[und][0][value]' => 'Drupal',
      'swappsproject_client_name[und][0][value]' => 'Carlos',
      'swappsproject_country[und][0][value]' => 'Colombia',
    );
    $this->drupalPost('node/add/swappsproject', $edit, t('Save'));
    $this->assertText("Swapps Project Type " . $edit['title'] . " has been created", "Found node creation message");

    // Look on the examples page to make sure it shows up there also.
    $this->drupalGet('examples/swappsproject');
    $this->assertText($edit['title'], "Found random title string");

  }

  /**
   * Check the value of body label.
   *
   * Checks whether body label has a value of "Swapps Project Description"
   */
  public function testBodyLabel() {
    // Create and login user.
    $account = $this->drupalCreateUser(array('access content', 'create swappsproject content'));
    $this->drupalLogin($account);

    // Request a node add swapps-project page.
    // Test whether the body label equals 'Swapps Project Description'.
    // Use '$this->assertRaw' to make certain to test the body label and not
    // some other text.
    $this->drupalGet('node/add/swappsproject');
    $this->assertResponse(200, 'node/add/swappsproject page found');
    $this->assertRaw('<label for="edit-body-und-0-value">Swapps Project Description </label>', 'Body label equals \'Swapps Project Description\'');
  }
}
